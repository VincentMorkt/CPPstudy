// 1. В чем состоит разница между циклами с проверкой на входе и циклами с проверкой на выходе? Какой из циклов С++ к какой категории относится?
// циклы с проверкой на входе проверяют условие, а затем выполняют тело цикла, если условие истинно
// к таким циклам относятся for и while
// Циклы с проверкой на выходе выполняют тело цикла гарантированно один раз, после чего проверяют условие, и если условие истинно, продолжают выполнять тело цикла
// к таким циклам относится do while

// 2. Что напечатает следующий фрагмент кода, если использовать его в программе?
#include <iostream>
using namespace std;
int main()
{
int i;
for (i = 0; i < 5; i++)
cout << i;
cout << endl;
// код напечатает:
// 01234
// и переведёт строку

// 3. Что напечатает следующий фрагмент кода, если использовать его в программе?
int j;
for ( j = 0; j < 11; j += 3)
cout << j;
cout << endl << j << endl;
// 0369
// 12

// 4. Что напечатает следующий фрагмент кода, если использовать его в программе?
int j = 5;
while (++j < 9) // префиксный инкремент. переменная сначала будет увеличена, а потом будет производится сравнение
cout << j++ << endl; // постфиксный инкремент. переменная сначала будет напечатана, а потом увеличена. каждый проход цикла увеличивает переменную на 2. будет напечатано:
// 68

// 5. Что напечатает следующий фрагмент кода, если использовать его в программе?
int k = 8;
do
cout << "k = " << k << endl;
while (k++ < 5); // k никогда не будет < 5, но один раз тело цикла будет выполненно, поэтому будет напечатано:
// k = 8

// 6. Напишите цикл for, который печатает значения 1 2 4 8 16 32 64, увеличивая
// вдвое значение переменной счетчика на каждом шаге.
for (int i = 1; i <=64; i *=2)
cout << i << ' ';

// 7. Как сделать так, чтобы тело цикла включало более одного оператора?
// взять все операторы в фигурные скобки - выделить их в отдельный блок кода

// 8. Правилен ли следующий оператор? Если нет, то почему? Если да, то что он делает?
int x = (1, 024); // да, хотя и имеет мало смысла. Выражение в скобках будет равно правому значению, то есть 024 в восьмиричной системе счисления.
// оператор объявляет целочисленную переменную х и присваивает ей значение 20 (024 в восьмиричной системе)

// А правилен ли такой оператор?
int y;
y = 1, 024; // да, оператор правильный, это два выражения, первое из которых присваивает y значение 1. при этом значением всего выражения будет 024 (если его чему-то присваивать или сравнивать)

// 9. Чем отличается cin >> ch от cin.get(ch) и ch = cin.get() с точки зрения ввода?
// cin >> ch читает один символ за исключением пробельных. 
// cin.get(ch) читает один символ (включительно с пробельными) в переменную переданную через аргумент, и возвращает объект cin, что удобно для конкатенации операций
// cin.get() работает аналагично, но символ передаётся с помощью возвращаемого значения
}