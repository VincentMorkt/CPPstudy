// 1. Что такое класс?
// Класс - это пользовательский тип, представляющий данные и методы для взаимодействия с ними.

// 2. Каким образом класс обеспечивает абстракцию, инкапсуляцию и сокрытие данных?
// Абстракция обеспечивается с помощью интерфейса, который состоит из методов для проведения операций с объектом.
// Инкапсуляция - скрытие деталей реализации - данных и кода методов. Клиенту (програмисту) по умолчанию доступен только интерфейс класса.
// Сокрытие - закрытая видимость для данных и внутренних методов (с помощью ключевого слова private), что делает возможным обращение к этим данным исключительно с помощью методов класса.

// 3. Каково отношение между объектом и классом?
// Класс определяет тип данных и методы взаимодействия с ними. Объект же является непосредственно данными, созданными и упрявляемыми в рамках правил, заданных классом.

// 4. Чем отличаются функции-члены класса от данных-членов класса помимо того, что они - функции?
// Часто данные-члены находятся в разделе privat и недоступны для клиента класса, а функции-члены в разделе public, и являются интерфейсом, с помощью которого клиент может получить доступ к данным.
// Также все объекты класса будут иметь различные данные, но одни и те же функции-члены.

// 5. Определите класс для представления банковского счета.
// Данные-члены должны включать имя вкладчика, номер счета (используйте строку) и баланс. Функциичлены должны позволять следующее:
// • создание объекта и его инициализация;
// • отображение имени вкладчика, номера счета и баланса;
// • добавление на счет суммы денег, переданной в аргументе;
// • снятие суммы денег, переданной в аргументе.
// Просто приведите объявление класса без реализации методов. (Возможность написать реализацию будет представлена в упражнении 1.)
#include <string>
class bankAcc
{
private:
    std::string name;
    std::string ID;
    double balance;

public:
    bankAcc(std::string name_ = "Error empyy name", std::string ID_ = "Error emty ID", double balance_ = 0)
    {
        name = name_;
        ID = ID_;
        balance = balance_;
    }; // конструктор по умолчанию, он же инициализирующий конструктор
    void show() const;
    double toUp(double amount);
    double withdraw(double amount);
    ~bankAcc();
};

// 6. Когда вызываются конструкторы класса? Когда вызываются деструкторы?
// конструкторы вызываются всегда при создании объекта класса, а деструкторы при его уничтожении (при завершении программы, при завершении блока или при использовании delete для динамических объектов)
// если их не определить в коде, они будут созданы автоматически компилятором.

// 7. Напишите код конструктора для класса банковского счета, описанного в вопросе 5.
// Уже сделано, в пункте 5

// 8. Что такое конструктор по умолчанию? Каковы выгоды его применения?
// Конструктор по умолчанию - конструктор, который будет применён, если не инициализировать объект. Такой конструктор не имеет аргументов, либо имеет значения по умолчанию для всех аргументов.
// Он позволяет предопределить поведение программы при создании объекта без инициализации, а также позволяет объявлять объекты без инициализации при наличии инициализирующего конструктора.

// 9. Модифицируйте определение класса Stock (версию в stock20.h) так, чтобы он имел функции-члены, которые возвращают значения индивидуальных данных членов.
// На заметку: член, который возвращает наименование компании, не должен давать возможности изменять массив. То есть он не может просто возвращать ссылку на string. Он может возвращать соnst-ссылку.
// stock20.h -- augmented version
#ifndef STOCK20_H_
#define STOCK20_H_

class Stock
{
private:
    std::string company;
    int shares;
    double share_val;
    double total_val;
    void set_tot() { total_val = shares * share_val; }

public:
    //  Stock();        // default constructor
    Stock(const std::string &co, long n = 0, double pr = 0.0);
    ~Stock(); // do-nothing destructor
    void buy(long num, double price);
    void sell(long num, double price);
    void update(double price);
    void show() const;
    const Stock &topval(const Stock &s) const;
    int shares() { return shares; };
    double share_val() { return share_val; };
    double total_val() { return total_val; };
    const std::string Compny() const { return company; };
};

#endif

// 10. Что такое this и *this?
// this - указатель, доступный в методах класса, который указывает на текущий объект. *this - разименованый указатель, представляющий собой сам объект.