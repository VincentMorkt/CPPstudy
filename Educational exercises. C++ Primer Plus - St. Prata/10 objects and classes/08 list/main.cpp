// Простой список можно описать следующим образом :
// • простой список может содержать ноль или более элементов определенного типа;
// • можно создавать пустой список;
// • можно добавлять элемент в список;
// • можно определять, пуст ли список;
// • можно определять, полон ли списqк.
// • можно посетить каждый элемент списка и выполнит над ним определенное действие.

// Как видите, список действительно прост; так, например, он не позволяет осуществлять вставку или удаление элементов.
// Спроектируйте класс List для представления этого абстрактного типа.
// Вы должны подготовить заголовочный файл list.h с объявлением класса и файл list.cpp с реализацией его методов.
// Вы должны также написать короткую программу, которая будет использовать полученный класс.
// Главная причина того, что спецификация списка проста, связана с попыткой упростить это упражнение.
// Вы можете реализовать список в виде массива или же в виде связного списка, если знакомы с этим типом данных.
// Однако открытый интерфейс не должен зависеть от вашего выбора. То есть открытый интерфейс не должен иметь индексов массива, указателей на узлы и т.п.
// Он должен быть выражен в виде общих концепций создания списка, добавления элемента в список и т.д.
// Обычный способ управления посещением каждого элемента в списке и выполнения над ним каких-то действий состоит в применении функции,
// которая принимает указатель на другую функцию в качестве аргумента: void visit(void (*pf)(Item &));
// Здесь pf указывает на функцию (не функцию-член), которая принимает ссылку на аргумент типа Item, где Item - это тип элементов списка.
// visit() применяет эту функцию к каждому элементу списка. В качестве общего руководства можете воспользоваться классом Stack.

//  main.cpp -- программа демонстратор

#include <iostream>
#include "list.h"

void show(Item &item);      // прототипы функций, которые будут переданны visit. Функция отображения содержания объекта
void increment(Item &item); // функция инкремента, добавляет 1 к объекту
int main()
{
    using namespace std;
    Item item1;                                                              // переменная типа Item, для передачи значений в стек.
    List list1;                                                              // объявление объекта класса. Будет создан пустой стек.
    cout << "cout << list1.isempty(); return == " << list1.isempty() << endl // проверка, пуст ли стек (он пуст)
         << endl;

    for (int i = 0; i < 12; i++) // цикл, добавляющий объекты в стек (попытка добавить 12 объектов в стек размером 10 объектов для демонстрации переполнения)
    {
        if (list1.isfull()) // если стек полон, сообщение об ошибке
            cout << "ERROR, LIST IS FULL, list1.isfull() == " << list1.isfull() << endl
                 << endl;
        else
        {
            item1 = i;         // присвоить итем значение, соответствующее индексу цикла
            list1.push(item1); // добавить это значение в стек
            list1.visit(show); // использование функции visit, которой передана функция show в качестве аргумента. Функция visit применяет show к каждому елементу стека
                               // это значит, что каждый проход цикла функция show отобразит все заполненные елементы стека
            cout << endl
                 << endl; 
        }
    }
    cout << "increment demo\n";
    list1.visit(increment); // функция visit, которой передана функция инкремента. Ко всем элементам стека будет применена операция += 1
    list1.visit(show);      // отображение результата работы предыдущего оператора

    cin.get(); // ожидание ввода
    return 0;  // оператор возврата
}

void show(Item &item) // функция отображает переданное ей значение и пробел
{
    std::cout << item << ' ';
}

void increment(Item &item) // функция инкремента, добавляет 1 к объекту
{
    item += 1;
}