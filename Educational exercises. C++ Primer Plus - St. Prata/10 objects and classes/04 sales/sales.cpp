// 4. Выполните упражнение 4 из главы 9, но преобразуйте структуру Sales и ассоциированные с ней функции в класс и методы.
// Замените функцию setSales(Sales &, double[], int) конструктором. Реализуйте интерактивный метод setSales(Sales &), используя конструктор.
// Оставьте класс в пространстве имен SALES.

// 4. Напишите программу, включающую три файла и использующую следующее пространство имен

// Первый файл должен быть заголовочным и содержать пространство имен.
// Второй файл должен содержать исходный код и расширять пространство имен, предоставляя определения трех прототипированных функций.
// В третьем файле должны объявляться два объекта Sales.
// Он должен использовать интерактивную версию функции setSales() для предоставления значений первой структуре
// и неинтерактивную версию той же функции для предоставления значений второй структуре.
// Он также должен отображать содержимое обеих структур с помощью функции showSales ().

// sales.spp -- реализация методов

#include <iostream>
#include "sales.h"

namespace SALES
{
    using std::cin; // объявления using
    using std::cout;
    using std::endl;

    // конструктор по умолчанию
    Sales::Sales()
    {
        double ar[QUARTERS] = {0, 0, 0, 0};
        setSales(ar);
    }

    void Sales::setSales(const double ar[]) // неинтерактивный метод
    {
        average = ar[0]; // переменным-членам структуры присваивается значение нулевого элемента массива
        max = ar[0];
        min = ar[0];
        for (int i = 0; i < QUARTERS; i++)
            sales[i] = ar[i]; // каждый проход цикла присваивает значения из массива переданного через аргумент в массив член-структуры
        for (int i = 1; i < QUARTERS; i++)
        {
            max = (max > ar[i]) ? max : ar[i]; // значение нулевого элемента массива, присовенное ранее, сравнивается с другими значениями
            min = (min < ar[i]) ? min : ar[i]; // и при необходимости заменяется на новое
            average += ar[i];                  // в этот член структуры записывается сумма всех элементов массива
        }
        average /= QUARTERS; // и после завершения цикла находится их среднее значение путём деления суммы на количество
    }

    // Интерактивно подсчитывает продажи за 4 квартала, сохраняет их в члене sales структуры s,
    // вычисляет и сохраняет среднее арифметическое, а также максимальное и минимальное значения введенных чисел
    void Sales::setSales()
    {
        cout << "Enter sales:\n";
        double ar[QUARTERS];               // создание массива для ввода данных
        for (int i = 0; i < QUARTERS; i++) // ввод данных через цикл (проверка корректности ввода отсутствует)
        {
            cout << i + 1 << " quarter: ";
            cin >> ar[i];
            cin.get();
        }
        setSales(ar); // передача введённых данных инициализирующему методу
    }

    // Отображает всю информацию из структуры s
    void Sales::showSales() const
    {
        cout << "\n---showSales()---\n";
        for (int i = 0; i < QUARTERS; i++) // цикл отображения членов массива
            cout << i + 1 << " quarter: " << sales[i] << endl;

        cout << endl
             << "Average: " << average << endl // отображение остальных членов класса
             << "    Max: " << max << endl
             << "    Min: " << min << endl
             << endl;
    }
}