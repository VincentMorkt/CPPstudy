// 1. Предоставьте определения методов для класса, описанного в вопросе 5, и напишите короткую программу для иллюстрации всех его возможностей.

// 5. Определите класс для представления банковского счета.
// Данные-члены должны включать имя вкладчика, номер счета (используйте строку) и баланс. Функциичлены должны позволять следующее:
// • создание объекта и его инициализация;
// • отображение имени вкладчика, номера счета и баланса;
// • добавление на счет суммы денег, переданной в аргументе;
// • снятие суммы денег, переданной в аргументе.
// Здесь приведена реализация методов класса.

#include <iostream>
#include "bankAccount.h" // заголовочный файл с объявлением класса

using std::cout;
using std::endl;

// конструктор по умолчанию, все аргументы имеют значения по умолчанию
bankAcc::bankAcc(std::string name_, std::string ID_, double balance_)
{
     name = name_; // присваивание данным-членам класса значений, переданных через аргументы
     ID = ID_;
     balance = balance_;
}

void bankAcc::show() const // метод для просмотра данных объекта
{
     using std::ios_base;                                                        // объявление using для ios_base
     ios_base::fmtflags orig = cout.setf(ios_base::fixed, ios_base::floatfield); // сохранение оригинального состояния флага cout.setf и установка его для отображения чисел в фиксированный режим
     std::streamsize prec = cout.precision(2);                                   // сохранение оригинального состояния cout.precisions и установка его для отображения двух чисел после точки

     cout << "   Name: " << name << endl // вывод в консоль содержания данных-членов объекта
          << "     ID: " << ID << endl
          << "Balance: " << balance << " $" << endl
          << endl;

     cout.setf(orig, ios_base::floatfield); // восстановление оригинального состояния cout.setf
     cout.precision(prec);                  // и cout.precisions
}

bool bankAcc::toUp(double amount) // метод для добавления денег на счёт. Возвращает false если не было успешно
{
     if (!(amount > 0)) // если сумма не больше нуля
     {
          cout << "error, amount must be > 0" << endl; // сообщение об ошибке
          return false;                                // возврат false, что соответствует ошибке
     }
     balance += amount; // прибавить к балансу сумму, переданную в аргументе
     return true;       // возврат true, что соответствет успеху операции
}

bool bankAcc::withdraw(double amount) // метод для снятия денег со счёта. Возвращает false если не было успешно
{
     if (!(amount > 0)) // если сумма не больше нуля
     {
          cout << "error, amount must be > 0" << endl; // сообщение об ошибке
          return false;                                // возврат false, что соответствует ошибке
     }
     if (amount > balance) // если сумма для снятия превышает баланс
     {
          cout << "error, amount can`t be bigger then the ballance" << endl; // сообщение об ошибке
          return false;                                                      // возврат false, что соответствует ошибке
     }
     balance -= amount; // отнимает от баланса сумму, переданную в аргументе
     return true;       // возврат true, что соответствет успеху операции
}