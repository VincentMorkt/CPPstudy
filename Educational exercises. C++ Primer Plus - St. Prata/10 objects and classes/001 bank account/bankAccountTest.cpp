// 1. Предоставьте определения методов для класса, описанного в вопросе 5, и напишите короткую программу для иллюстрации всех его возможностей.

// 5. Определите класс для представления банковского счета.
// Данные-члены должны включать имя вкладчика, номер счета (используйте строку) и баланс. Функциичлены должны позволять следующее:
// • создание объекта и его инициализация;
// • отображение имени вкладчика, номера счета и баланса;
// • добавление на счет суммы денег, переданной в аргументе;
// • снятие суммы денег, переданной в аргументе.
// Здесь приведена программа-демонстратор работы класса
#include <iostream>
#include "bankAccount.h"

int main()
{
    using std::cout; // операторы using для включения cout & endl в область видимости
    using std::endl;
    const int Size = 5; // константа для управления размером массива
    bankAcc accounts[Size] = {
        // объявление массива объектов класса bankAcc
        bankAcc("Serhii Sternenko", "472", 10000), // инициализация первого элемента массива
        bankAcc("Timofey Vyakin", "274", 3),
        bankAcc(),                         // инициализация третьего элемента массива значениями по умолчанию
        bankAcc("Sergeant Marcus", "047"), // инициализация четвёртого элемента массива, последний аргумент инициализирован значением по умолчанию
        // пятый элемент массива будет инициализирован значениями по умолчанию
    };

    cout << ".show demonstration 1\n\n"; // иформационное сообщение
    for (int i = 0; i < Size; i++)     // цикл, отображающий все 5 объектов массива
    {
        cout << "Account# " << i + 1 << ": \n"; // информационное сообщение о порядковом номере объекта
        accounts[i].show();                     // использование метода для отображения данных объекта
    }

    cout << "initialisation accounts[2]\n\n";              // иформационное сообщение
    accounts[2] = bankAcc("Vincent Morkt", "069", 3000); // инициализация с помощью конструктора
    accounts[2].show();                                  // проверка результата

    cout << "correct .withdraw & .toUp demonstrations\n";
    accounts[0].show(); // показать первый и второй аккаунты
    accounts[1].show();
    cout << "some magic here\n\n";
    accounts[0].withdraw(10000); // снять деньги с первого аккаунта
    accounts[1].toUp(10000);     // положить деньги на второй аккаунт
    accounts[0].show();          // показать первый и второй аккаунты
    accounts[1].show();

    cout << "incorrect .withdraw & .toUp demonstrations\n\n";
    accounts[2].withdraw(4000);
    accounts[2].withdraw(-4000);
    accounts[2].show();
    
    std::cin.get();
}