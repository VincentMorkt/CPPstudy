// 1. Как вы объявите следующие объекты данных?
// а. actor - массив из 30 элементов char.
char actor[30];
// б. betsie - массив из 100 элементов short.
short betsie[100];
// в. chuck - массив из 13 элементов float.
float chuck[13];
// г. dipsea - массив из 64 элементов long douЬle.
long double dipsea[64];

// 2. Выполните задание из вопроса 1, используя шаблонный класс array вместо встроенных массивов.
#include <array>
using std::array;
array<char, 30> actor;
array<short, 100> betsie;
array<float, 13> chuck;
array<long double, 64> dipsea;

#include <iostream>
#include <string>
#include <vector>
int main()
{
    // 3. Объявите массив из пяти элементов int и инициализируйте его
    // первыми пятью положительными нечетными числами.
    int intarr[5] = {1, 3, 5, 7, 9};

    // 4. Напишите оператор, который присваивает переменной even сумму первого и
    // последнего элементов массива из вопроса 3.
    int even = intarr[0] + intarr[4];

    // 5. Напишите оператор, который отображает значение второго элемента массива float по имени ideas.
    using std::cout;
    using std::endl;
    float ideas[2] = {1, 23.4};
    cout << "ideas [1] = " << ideas[1] << endl;

    // 6. Объявите массив char и инициализируйте его строкой "cheeseburger" .
    char charMassive[13] = "cheesburger";

    // 7. Объявите объект string и инициализируйте его строкой "Waldorf Salad".
    using std::string;
    string menu = "Waldorg Salad";
    // cout << menu << endl;

    // 8. Разработайте объявление структуры, описывающей рыбу. Структура должна
    // включать вид, вес в полных унциях и длину в дробных дюймах.
    struct fish
    {
        char kind[20];
        int weightOunces;
        float lenghtInches;
    };

    // 9. Объявите переменную типа, определенного в вопросе 8, и инициализируйте ее.
    fish yaz = {"yaz", 77, 13.77};

    // 10. Воспользуйтесь enum для определения типа по имени Response с возможными
    // значениями Yes, No и Maybe. Yes должно быть равно 1, No - 0, a Maybe - 2.
    enum Response
    {
        No,
        Yes,
        Maybe
    };

    // 11. Предположим, что ted - переменная типа double. Объявите указатель, указывающий на ted,
    // и воспользуйтесь им, чтобы отобразить значение ted.
    double ted = 36.6;
    double *td = &ted;
    cout << "ted = *td = " << *td << endl;

    // 12. Предположим, что treacle - массив из 10 элементов float.
    // Объявите указатель, указывающий на первый элемент treacle,
    // и используйте его для отображения первого и последнего элементов массива.
    float treacle[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    cout << "treacle[0] = *treacle = " << *treacle << endl
         << "treacle[9] = *(treacle+9) = " << *(treacle + 9) << endl;

    // 13. Напишите фрагмент кода, который запрашивает у пользователя положительное целое число
    // и затем создает динамический массив с указанным количеством элементов типа int.
    // Сделайте это с применением операции new, а затем с использованием объекта vector.
    int num = 3;
    using std::cin;
    cin >> num;
    int *intM13 = new int[num];
    delete[] intM13;
    using std::vector;
    vector<int> intM13_2(num);

    // 14. Правильный ли код приведен ниже? Если да, что он напечатает?
    cout << (int *)"Home of the jolly bytes" << endl; // вывод на экран адреса первого символа строки

    // 15. Напишите фрагмент кода, который динамически выделит память для структуры, описанной в вопросе 8,
    // и затем прочитает в нее значение для члена kind структуры.

    fish *pf = new fish;
    cin >> pf->kind;
    // 16. В листинге 4.6 иллюстрируется проблема, вызванная тем, что числовой ввод
    // следует за строчно-ориентированным вводом. Как замена оператора cin.getline (address, 80);
    // оператором cin >> address; повлияет на работу этой программы?
    // cin.getline(address,80); позволяет ввести до 80 символов с пробелами и записать их в массив address.
    // cin >> позволяет ввести любое количество символов без пробелов. Риск выйти за пределы массива при записи.
    // Все введённые после данные остануться в очереди потока istream.

    // 17. Объявите объект vector из 10 объектов string и объект array из 10 объектов
    // string. Покажите необходимые заголовочные файлы и не используйте using.
    // Для количества строк применяйте const.
    const int num1 = 10;
    std::vector<std::string> vs(num1);
    std::array<std::string, num1> as;
}