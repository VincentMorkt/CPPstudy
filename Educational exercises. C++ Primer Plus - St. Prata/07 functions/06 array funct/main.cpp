// Напишите программу, использующую описанные ниже функции.
// Fill_array() принимает в качестве аргумента имя массива элементов типа double и размер этого массива.
// Она приглашает пользователя ввести значения double для помещения их в массив.
// Ввод прекращается при наполнении массива либо когда пользователь вводит нечисловое значение и возвращает действительное количество элементов.
// Show_array() принимает в качестве аргументов имя массива значений double, а также его размер, и отображает содержимое массива.
// Reverse_array() принимает в качестве аргумента имя массива значений double, а также его размер, и изменяет порядок его элементов на противоположный.
// Программа должна использовать эти функции для наполнения массива, обращения порядка его элементов, кроме первого и последнего, с последующим отображением.

#include <iostream>
#include <cstring>

using namespace std;

int Fill_array(double arr[], int arrSize); // прототипы функций сокластно тз
void Show_array(double arr[], int arrSize);
void Reverse_array(double arr[], int arrSize);

int main()
{
    const int arrSize = 10;                     // размер массива
    double values[arrSize];                     // объявление массива
    int factSize = Fill_array(values, arrSize); // вызов функции ввода
    Reverse_array(values + 1, factSize - 2);    // вызов функции, меняющей порядок элементов. Функции передаются значения, исключающие изменение первого и последнего элементов массива
    Show_array(values, factSize);               // вызов функции вывода
    cout << "\nPress <ENTER> to close.";        // закрытие программы
    cin.get();                                  // ожидание ввода для просмотра результатов работы программы
    return 0;
}

int Fill_array(double arr[], int arrSize) // функция ввода, принимает имя и размер массива, возвращает фактическое количество введённых значений
{
    cout << "Enter " << arrSize << " values (or enter \"done\" to stop input)\n";
    const int strSize = 30;  // размер строки для ввода символьной метки завершения ввода "done"
    char str[strSize] = {0}; // символьный массив, он же - строка
    int i = 0;               // счётчик введённых значений и переменный индекс массива
    while (i < arrSize)      // если текущий индекс меньше размера массива
    {
        cout << "#" << i + 1 << ": ";
        if (cin >> arr[i]) // если ввод значения успешн
            i++;           // инкремент i
        else               // иначе
        {
            cin.clear();                // очистка failbit
            cin.get(str, strSize);      // запись потока ввода в символьный массив
            if (strcmp(str, "done"))    // проверка содержания символьного массива, если он не равен метке "done"
                cout << "Bad input!\n"; // сообщение об ошибке
            else                        // если же равен
                break;                  // прервать цикл
        }
    }
    cin.get();                  // как сin >> arr[i], так и cin.get(str, strSize) оставляют в потоке '\n'
    cout << "Input complete\n"; // сообщение о завершении ввода
    return i;                   // возврат счётчика введённых значений
}

void Show_array(double arr[], int arrSize) // функция вывода
{
    for (int i = 0; i < arrSize; i++) // цикл вывода
        cout << "#" << i + 1 << ": " << arr[i] << endl;
    return;
}

void Reverse_array(double arr[], int arrSize) // функция, меняющая местами значения
{
    double temp = 0; // временная переменная, необходимая для работы функции
    for (int i = 0; i < arrSize; i++)
    {
        temp = arr[i];           // временной переменной присваивается значение элемента с меньшим индексом
        arr[i] = arr[--arrSize]; // элементу с меньшим индексмо присваивается значение элемента с большим индексом
                                 // операция префиксного декремента нужна для корректного значения и для измененчивости по мере работы цикла
        arr[arrSize] = temp;     // элементу с большим индексом присваивается значение временной переменной
    }
    return;
}
