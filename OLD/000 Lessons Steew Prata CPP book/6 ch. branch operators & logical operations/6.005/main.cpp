/*Королевство Нейтрония, где денежной единицей служит тварп, использует следующую шкалу налогообложения:
первые 5 ООО тварпов - налог 0%
следующие 10 ООО тварпов - налог 10%
следующие 20 ООО тварпов - налог 15%
свыше 35 ООО тварпов - налог 20%
Например, если некто зарабатывает 38 ООО тварпов, то он должен заплатить налогов 5000 х 0,00 + 1 0000 х 0,10 + 20000 х 0,15 + 3000 х 0,20, или 4 600 тварпов.
Напишите программу, которая использует цикл для запроса доходов и выдачи подлежащего к выплате налога. Цикл должен завершаться, когда пользователь
вводит отрицательное или нечисловое значение.*/

#include <iostream>
#include <climits> // константы, отражающие границы диапазонов типов данных
#include <ctime>   // функции, прототипы и константы для работы с системным временем
#include <iomanip> // подключаемый файл содержащий функции для манипуляций потоками ввода-вывода
struct tax         // объявление структуры
{
    double incomeLimit;   // переменная, отражающая лимит тварпов для налоговой группы
    double taxPercentage; // переменная, отражающая процент налогов для соответствующего лимита и группы
};
int main()
{
    using namespace std;
    cout << fixed;           // указание для cout отображать значения в фиксированном виде (в виде десятичной дроби, не в экспонециальном)
    cout << setprecision(1); // функция setprecision(1) переопределяющая количество десятичных знаков после точки в отображаемых значениях

    // данные ////////////////////////////////////////////////////////////////////////////////////////////////////////////    
    
    const int groups = 4;
    tax taxGroup[groups] = // объявление и инициализация массива структур, согластно тз
        {
            {5000, 0},
            {10000, 0.1},
            {20000, 0.15},
            {__DBL_MAX__, 0.2}};                 // лимит последней группы ограничен диапазоном допустимых значений. Это сделано для оптимизации программы в один цикл в будущем.
    double income = 0, profit = 0, sumOfTax = 0; // объявление переменных для управления данными
    
    // ядро программы /////////////////////////////////////////////////////////////////////////////////////////////////////

    cout << "Enter you income in twarps (to exit enter a negative value or any non-numeric character): ";
    while (cin >> income && income > 0)            // присвоить вводимое значение переменной income. Продолжать цикл, если ввод успешн и значение больше нуля
    {                                              // цикл будет прерван вводом отрицательного или нечислового значения (включая пробел) что приведёт к завершению программы
        sumOfTax = 0;                              // обнуление суммы налогов перед новым подсчётом
        profit = 0;                                // обнуление прибыли
        for (int i = 0; i < groups; i++)           // подсчёт налогов для четырёх групп реализован через цикл
            if (income <= taxGroup[i].incomeLimit) // если доход меньше лимита текущей группы
            {
                sumOfTax += income * taxGroup[i].taxPercentage;        // прибавить к сумме налогов доход умноженный на коэфициент
                profit += income - income * taxGroup[i].taxPercentage; // прибавить к сумме прибыли доход минус налог
                break;                                                 // завершить цикл
            }
            else                                                       // иначе
            {
                sumOfTax += taxGroup[i].incomeLimit * taxGroup[i].taxPercentage;                         // прибавить к сумме налогов лимит умноженный на коэфициент
                profit += taxGroup[i].incomeLimit - taxGroup[i].incomeLimit * taxGroup[i].taxPercentage; // прибавить к сумме прибыли лимит минус лимит умноженный на коэфициент
                income -= taxGroup[i].incomeLimit;                                                       // отнять от дохода лимит текущей группы и перейти к следующей группе
            }
        cout << "You tax = " << sumOfTax << endl    // отображение полученных значений
             << "You profit = " << profit << endl;
        cout << "Enter you income in twarps: ";     // предложение ввести следующее значение дохода для подсчёта
    }

    // закрытие программы //////////////////////////////////////////////////////////////////////////////////////////////////

    cout << "Closing";            // программа напечатает Closing а затем будут выведены четыре точки с интервалом в пол секунды (правда мы увидем только 3, поскольку после 4 программа сразу закроется)
    clock_t delay, start;         // объявление переменных типа, соответствующего псевдониму clock_t
    delay = 0.5 * CLOCKS_PER_SEC; // значение delay соответствует половине секунды в еденицах системного времени
    for (int i = 0; i < 4; i++)   // цикл выводящий точки
    {
        start = clock();                // переменной start присваивается значение текущего времени, прошедшего с момента запуска программы. Это сделано внутри цикла, чтобы получать новое значени для каждого прохода
        while (clock() - start < delay) // цикл задержки
            continue;
        cout << '.';
    }
    return 0;
}